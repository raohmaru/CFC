require 'rake/clean'
require 'rubygems'
require 'json'
require 'redcarpet'


OCTGN_dir = "D:/Documentos/OCTGN"
start_time = Time.now
CLOBBER.include ["o8g/*.o8g", "#{OCTGN_dir}/LocalFeed/Card*.nupkg", "o8g/Scripts/*.pyc"]

task :default => [:build]


desc "Builds the .o8g and .nupkg files from the game definition files"
task :build => [:versionbump, :docs] do
  sh "#{OCTGN_dir}/OCTGN/o8build.exe -d=o8g"
end


desc "Increases the build number by 1"
task :versionbump do
  filename = "o8g/definition.xml"
  file = File.open(filename, 'r')
  str = ''
  m = nil
  regexp = /version="(\d+)\.(\d+)\.(\d+)\.(\d+)"/
	file.each_line do |line|
    if m.nil?
      m = line.match(regexp)
      if m
        buildnum = m[4].to_i + 1
        puts "Bump build number to #{buildnum} (#{m[1]}.#{m[2]}.#{m[3]}.#{buildnum})\n\r"
        line.sub!('.'+m[4]+'"', '.'+buildnum.to_s+'"')
      end
    end
    str += line
	end
  file.close
  File.open(filename, 'w') do |out|
    out << str
  end
end


desc "Builds and moves the NUPKG file to the OCTGN LocalFeed dir"
task :deploy => [:clobber, :build] do
  mv Dir.glob("o8g/*.nupkg"), "#{OCTGN_dir}/LocalFeed/"
  # Rake::Task["octgn"].execute
  
  end_time = Time.now
  puts "\nTask completed at " + Time.now.strftime("%d-%m-%Y %H:%M")
  puts "Time elapsed: #{(end_time - start_time)*1000} milliseconds"
end


desc "Verifies the files as a valid game definition"
task :test do
  sh "#{OCTGN_dir}/OCTGN/o8build.exe -v -d=o8g"
end


desc "Runs OCTGN in dev mode, in the table view with the CFC game loaded"
task :octgn do
  puts "\nFixing bug with OCTGN asking for Wine..."
  filename = OCTGN_dir + "/Config/settings.json"
  file = File.open(filename, 'r')
  settings = JSON.parse(file.read)
  file.close
  settings.delete('AskedIfUsingWine')
  File.open(filename, 'w') { |f|
    f.puts JSON.pretty_generate(settings)
  }
  
  # OCTGN window closes after the loading screen ends
  # system "#{OCTGN_dir}/OCTGN/OCTGN.exe /t /g=e3d56d9e-900d-49c6-b6ae-22cbb51be153 /x"
  puts "Run #{OCTGN_dir}/OCTGN/OCTGN.exe /t /g=e3d56d9e-900d-49c6-b6ae-22cbb51be153 /x"
end


desc "Converts Markdown documents in Documents/ folder into HTML"
task :docs do
  puts "Converting Markdown files into HTML"
  # Initializes a Markdown parser
  renderer = Redcarpet::Render::HTML.new({:with_toc_data=>true, :hard_wrap=>true, :tables => true})
  # Initializes a Markdown HTML renderer
  markdown = Redcarpet::Markdown.new(renderer, {:autolink=>true, :underline=>true, :tables => true})
  toc_md = Redcarpet::Markdown.new(Redcarpet::Render::HTML_TOC.new)
  Dir.glob("o8g/Documents/*.md") do |md_file|
	puts "   " + md_file
	base_name = File.basename(md_file, ".md")
    html_file = File.join(File.dirname(md_file), base_name + ".html")
    File.open(html_file, 'w') { |f|
	  file_contents = File.read(md_file)
	  doc = markdown.render(file_contents)
	  toc_idx = file_contents.index('<!-- toc -->')
	  if toc_idx
	    toc = toc_md.render(file_contents[toc_idx..-1])
	    doc.sub!('<!-- toc -->', toc)
      end
      f.puts <<EOD
<html>
<head>
	<meta charset="utf-8">
	<title>#{base_name}</title>
	<style>
	html, body {
		font-family: Tahoma, Arial, "Helvetica Neue", Helvetica, sans-serif;
    font-size: 14px;
		background-color: #FFFBF2;
	}
	h2 {
    clear: left;
		margin-top: 1.6em;
	}
	h3 {
    clear: left;
	}
	li {
		margin-bottom: 0.5em;
	}
	img {
		max-width: 100%;
    vertical-align: middle;
	}
  .kb {
    padding: 0 0.2em;
    font-family: "Courier New", Courier, monospace;
    line-height: 1.6em;
    background-color: #fff;
    border: solid 1px #bbb;
    border-radius: 3px;
    box-shadow: 0 2px 0px 0px rgba(0, 0, 0, 0.33);
  }
  .sm {
    font-size: 80%;
  }
  table {
    font-size: 14px;
    border-collapse: collapse;
  }
  th {
    padding-bottom: 0.5em;
  }
  tbody tr:nth-child(2n) {
    background-color: #F9F3E6;
  }
  thead tr {
    border-bottom: solid 1px #b6b6b6;
  }
  td {
    padding-right: 0.6em;
    border-bottom: solid 1px #e1e1e1;
  }
  .ab {
    font-size: 120%;
    line-height: 0;
    color: #990000;
  }
  .ab-activated {
    font-size: 170%;
  }
  .ab-auto {
    position: relative;
    top: 0.1em;
    font-size: 175%;
  }
	</style>
</head>
<body>
#{doc}
</body>
</html>
EOD
    }
  end
  puts ""
end